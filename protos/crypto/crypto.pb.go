// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: crypto.proto

package crypto

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetCryptoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *GetCryptoRequest) Reset() {
	*x = GetCryptoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoRequest) ProtoMessage() {}

func (x *GetCryptoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoRequest) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{0}
}

func (x *GetCryptoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCryptoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Symbol            string  `protobuf:"bytes,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	MarketCapUSD      float64 `protobuf:"fixed64,3,opt,name=MarketCapUSD,proto3" json:"MarketCapUSD,omitempty"`
	Price             float64 `protobuf:"fixed64,4,opt,name=Price,proto3" json:"Price,omitempty"`
	CirculatingSupply float64 `protobuf:"fixed64,5,opt,name=CirculatingSupply,proto3" json:"CirculatingSupply,omitempty"`
	Mineable          bool    `protobuf:"varint,6,opt,name=Mineable,proto3" json:"Mineable,omitempty"`
	Volume            float64 `protobuf:"fixed64,7,opt,name=Volume,proto3" json:"Volume,omitempty"`
	ChangeHour        string  `protobuf:"bytes,8,opt,name=ChangeHour,proto3" json:"ChangeHour,omitempty"`
	ChangeDay         string  `protobuf:"bytes,9,opt,name=ChangeDay,proto3" json:"ChangeDay,omitempty"`
	ChangeWeek        string  `protobuf:"bytes,10,opt,name=ChangeWeek,proto3" json:"ChangeWeek,omitempty"`
}

func (x *GetCryptoResponse) Reset() {
	*x = GetCryptoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoResponse) ProtoMessage() {}

func (x *GetCryptoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoResponse) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{1}
}

func (x *GetCryptoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCryptoResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetCryptoResponse) GetMarketCapUSD() float64 {
	if x != nil {
		return x.MarketCapUSD
	}
	return 0
}

func (x *GetCryptoResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetCryptoResponse) GetCirculatingSupply() float64 {
	if x != nil {
		return x.CirculatingSupply
	}
	return 0
}

func (x *GetCryptoResponse) GetMineable() bool {
	if x != nil {
		return x.Mineable
	}
	return false
}

func (x *GetCryptoResponse) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *GetCryptoResponse) GetChangeHour() string {
	if x != nil {
		return x.ChangeHour
	}
	return ""
}

func (x *GetCryptoResponse) GetChangeDay() string {
	if x != nil {
		return x.ChangeDay
	}
	return ""
}

func (x *GetCryptoResponse) GetChangeWeek() string {
	if x != nil {
		return x.ChangeWeek
	}
	return ""
}

type SubscribeCryptoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*SubscribeCryptoResponse_GetCryptoResponse
	//	*SubscribeCryptoResponse_Error
	Message isSubscribeCryptoResponse_Message `protobuf_oneof:"message"`
}

func (x *SubscribeCryptoResponse) Reset() {
	*x = SubscribeCryptoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCryptoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCryptoResponse) ProtoMessage() {}

func (x *SubscribeCryptoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCryptoResponse.ProtoReflect.Descriptor instead.
func (*SubscribeCryptoResponse) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{2}
}

func (m *SubscribeCryptoResponse) GetMessage() isSubscribeCryptoResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *SubscribeCryptoResponse) GetGetCryptoResponse() *GetCryptoResponse {
	if x, ok := x.GetMessage().(*SubscribeCryptoResponse_GetCryptoResponse); ok {
		return x.GetCryptoResponse
	}
	return nil
}

func (x *SubscribeCryptoResponse) GetError() *status.Status {
	if x, ok := x.GetMessage().(*SubscribeCryptoResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isSubscribeCryptoResponse_Message interface {
	isSubscribeCryptoResponse_Message()
}

type SubscribeCryptoResponse_GetCryptoResponse struct {
	GetCryptoResponse *GetCryptoResponse `protobuf:"bytes,1,opt,name=GetCryptoResponse,proto3,oneof"`
}

type SubscribeCryptoResponse_Error struct {
	Error *status.Status `protobuf:"bytes,2,opt,name=Error,proto3,oneof"`
}

func (*SubscribeCryptoResponse_GetCryptoResponse) isSubscribeCryptoResponse_Message() {}

func (*SubscribeCryptoResponse_Error) isSubscribeCryptoResponse_Message() {}

var File_crypto_proto protoreflect.FileDescriptor

var file_crypto_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xb9, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x55, 0x53,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x70, 0x55, 0x53, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6e,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4d, 0x69, 0x6e,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x22, 0x94, 0x01, 0x0a, 0x17,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x80, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x32, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x11, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x12, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_crypto_proto_rawDescOnce sync.Once
	file_crypto_proto_rawDescData = file_crypto_proto_rawDesc
)

func file_crypto_proto_rawDescGZIP() []byte {
	file_crypto_proto_rawDescOnce.Do(func() {
		file_crypto_proto_rawDescData = protoimpl.X.CompressGZIP(file_crypto_proto_rawDescData)
	})
	return file_crypto_proto_rawDescData
}

var file_crypto_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_crypto_proto_goTypes = []interface{}{
	(*GetCryptoRequest)(nil),        // 0: GetCryptoRequest
	(*GetCryptoResponse)(nil),       // 1: GetCryptoResponse
	(*SubscribeCryptoResponse)(nil), // 2: SubscribeCryptoResponse
	(*status.Status)(nil),           // 3: google.rpc.Status
}
var file_crypto_proto_depIdxs = []int32{
	1, // 0: SubscribeCryptoResponse.GetCryptoResponse:type_name -> GetCryptoResponse
	3, // 1: SubscribeCryptoResponse.Error:type_name -> google.rpc.Status
	0, // 2: Crypto.GetCrypto:input_type -> GetCryptoRequest
	0, // 3: Crypto.SubscribeCrypto:input_type -> GetCryptoRequest
	1, // 4: Crypto.GetCrypto:output_type -> GetCryptoResponse
	2, // 5: Crypto.SubscribeCrypto:output_type -> SubscribeCryptoResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_crypto_proto_init() }
func file_crypto_proto_init() {
	if File_crypto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_crypto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeCryptoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_crypto_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SubscribeCryptoResponse_GetCryptoResponse)(nil),
		(*SubscribeCryptoResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crypto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_crypto_proto_goTypes,
		DependencyIndexes: file_crypto_proto_depIdxs,
		MessageInfos:      file_crypto_proto_msgTypes,
	}.Build()
	File_crypto_proto = out.File
	file_crypto_proto_rawDesc = nil
	file_crypto_proto_goTypes = nil
	file_crypto_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CryptoClient is the client API for Crypto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CryptoClient interface {
	GetCrypto(ctx context.Context, in *GetCryptoRequest, opts ...grpc.CallOption) (*GetCryptoResponse, error)
	SubscribeCrypto(ctx context.Context, opts ...grpc.CallOption) (Crypto_SubscribeCryptoClient, error)
}

type cryptoClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoClient(cc grpc.ClientConnInterface) CryptoClient {
	return &cryptoClient{cc}
}

func (c *cryptoClient) GetCrypto(ctx context.Context, in *GetCryptoRequest, opts ...grpc.CallOption) (*GetCryptoResponse, error) {
	out := new(GetCryptoResponse)
	err := c.cc.Invoke(ctx, "/Crypto/GetCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) SubscribeCrypto(ctx context.Context, opts ...grpc.CallOption) (Crypto_SubscribeCryptoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Crypto_serviceDesc.Streams[0], "/Crypto/SubscribeCrypto", opts...)
	if err != nil {
		return nil, err
	}
	x := &cryptoSubscribeCryptoClient{stream}
	return x, nil
}

type Crypto_SubscribeCryptoClient interface {
	Send(*GetCryptoRequest) error
	Recv() (*SubscribeCryptoResponse, error)
	grpc.ClientStream
}

type cryptoSubscribeCryptoClient struct {
	grpc.ClientStream
}

func (x *cryptoSubscribeCryptoClient) Send(m *GetCryptoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cryptoSubscribeCryptoClient) Recv() (*SubscribeCryptoResponse, error) {
	m := new(SubscribeCryptoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CryptoServer is the server API for Crypto service.
type CryptoServer interface {
	GetCrypto(context.Context, *GetCryptoRequest) (*GetCryptoResponse, error)
	SubscribeCrypto(Crypto_SubscribeCryptoServer) error
}

// UnimplementedCryptoServer can be embedded to have forward compatible implementations.
type UnimplementedCryptoServer struct {
}

func (*UnimplementedCryptoServer) GetCrypto(context.Context, *GetCryptoRequest) (*GetCryptoResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetCrypto not implemented")
}
func (*UnimplementedCryptoServer) SubscribeCrypto(Crypto_SubscribeCryptoServer) error {
	return status1.Errorf(codes.Unimplemented, "method SubscribeCrypto not implemented")
}

func RegisterCryptoServer(s *grpc.Server, srv CryptoServer) {
	s.RegisterService(&_Crypto_serviceDesc, srv)
}

func _Crypto_GetCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).GetCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Crypto/GetCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).GetCrypto(ctx, req.(*GetCryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_SubscribeCrypto_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CryptoServer).SubscribeCrypto(&cryptoSubscribeCryptoServer{stream})
}

type Crypto_SubscribeCryptoServer interface {
	Send(*SubscribeCryptoResponse) error
	Recv() (*GetCryptoRequest, error)
	grpc.ServerStream
}

type cryptoSubscribeCryptoServer struct {
	grpc.ServerStream
}

func (x *cryptoSubscribeCryptoServer) Send(m *SubscribeCryptoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cryptoSubscribeCryptoServer) Recv() (*GetCryptoRequest, error) {
	m := new(GetCryptoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Crypto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Crypto",
	HandlerType: (*CryptoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCrypto",
			Handler:    _Crypto_GetCrypto_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeCrypto",
			Handler:       _Crypto_SubscribeCrypto_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "crypto.proto",
}
